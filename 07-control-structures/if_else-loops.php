<?php

// УПРАВЛЯЮЩИЕ КОНСТРУКЦИИ (if, else, elseif, else if):

$score = 90;
if ($score >= 80) {
    echo '5';
        if ($score >= 90) {     // Внутри одного условия можно вкладывать другие условия
            echo '+';
        }
} elseif ($score >= 60) {
    echo '4';
} else if ($score >= 40) {      // Вариант написания else if через пробел не рекомендуется использовать
    echo '3';
} else {
    echo '2';
}   echo '<br>';


// ЦИКЛЫ (while, do-while, for, foreach):

// ЦИКЛ while:

$a = 0;
while ($a <= 3) {           // Цикл будет повторяться до тех пор, пока условие в скобках true
    echo $a++ . ' ';        // Удаление ++ приведет к бесконечному выполнению цикла
}   echo '<br>';            // При встраивании while в HTML цикл нужно завершать с помощью endwhile

$b = 0;
while (true) {              // Вариант цикла while с инструкцией break
    if ($b > 5) {           // Когда условие в скобках выполнится, break прервет цикл
        break;
    }
    echo $b++ . ' ';
}   echo '<br>';

$c = 0;
while (true) {
    while ($c > 7) {        // Один цикл может быть вложен в другой цикл
        break 2;            // По умолчанию break прерывает 1 ближайший цикл, но можно указать кол-во уровней циклов
    }
    echo $c++ . ' ';
}   echo '<br>';

$d = 0;
while ($d <= 9) {
    if ($d % 2 === 0) {     // Проверка на четность. Если число четное, то выполнится код в фигурных скобках
        $d++;
        continue;           // Переход к следующей итерации цикла. Как и в случае с break можно указать кол-во уровней
    }
    echo $d++ . ' ';        // Выведутся только нечетные числа до 9 включительно
}   echo '<br>';


// ЦИКЛ do while:

$e = 15;
do {                        // Конструкция do позволяет выполнить код внутри фигурных скобок как минимум единожды
    echo $e++ . '<br>';     // Значение переменной отобразится, даже если условие while в круглых скобках false
}   while ($e <= 10);


// ЦИКЛ for:

for ($f = 0; $f <= 10; $f++) {  // Первое выражение $f = 0 выполнится один раз при первой итерации
    echo $f . ' ';              // Второе выражение $f <= 10 это условие, проверяемое в начале каждой итерации
}   echo '<br>';                // Третье выражение $f++ выполнится в конце каждой итерации, пока условие верно

// Выражения в скобках необязательны, но такой код приведет к бесконечному циклу:
//for (;;) {
//    echo $f . ' ';
//}

// Третий параметр может иметь несколько выражений через запятую
// Если во втором параметре несколько выражений, то приоритетным будет последнее
for ($g = 0; $g <= 2, $g <= 4; print $g, $g++) {
    echo ' ';
}   echo '<br><br>';

$text = 'Hello';
for ($h = 0; $h < strlen($text); $h++) {    // Циклом можно выводить каждый символ строки
    echo $text[$h] . '<br>';                // Это применимо и к циклам while и do while
}   echo '<br>';

$text = ['a', 'b', 'c', 'd'];
for ($i = 0; $i < count($text); $i++) {     // Таким образом можно выводить каждый элемент массива
    echo $text[$i] . ' ';                   // Это также применимо к циклам while и do while
}   echo '<br>';                            // Использование count в каждом цикле может замедлить программу

$text = ['e', 'f', 'g', 'h'];
//$length = count($text)                    // Можно вынести это выражение над циклом
for ($j = 0, $length = count($text); $j < $length; $j++) {
    echo $text[$j] . ' ';
}   echo '<br><br>';                        // В таком варианте функция count будет вызвана лишь один раз


// ЦИКЛ foreach (используется для перебора массивов и объектов):

$colors = ['red', 'green', 'blue'];         // В каждом цикле переменной $color присвоится значение из массива
foreach ($colors as $color) {               // В цикл foreach можно поместить только массив или объекты
    echo $color . ' ';
}   echo '<br>';

$colors = [1 => 'red', 2 => 'green', 3 => 'blue'];
foreach ($colors as $key => $color) {
    echo $key . '. ' . $color . '<br>';     // Ключи значений также можно использовать в цикле и выводить их
}   echo '<br>';

$colors = ['red', 'green', 'blue'];
foreach ($colors as $key => &$color) {      // Можно использовать амперсанд, чтобы присвоить значение по ссылке
    $color = 'purple';                      // В данном случае все элементы примут это значение по ссылке
}
print_r($colors);

// После цикла foreach переменные остаются в системе с последним присвоенным значением
echo '<br><br>' . $color . '<br><br>';

// Необходимо учитывать это во избежание возможных багов, особенно в случае присваивания значения по ссылке
$color = 'orange';
print_r($colors);       // Изменение переменной $color приведет к изменению последнего элемента массива $colors
echo '<br><br>';

unset($color);          // Рекомендуется удалять переменную после цикла с помощью unset

// Пример использования цикла foreach для перебора ассоциативного массива
$user = [
    'name' => 'Alex',
    'email' => 'alex@email.com',
    'roles' => ['admin', 'editor']                      // Вложенный массив не удастся вывести без доп. функций
];

foreach ($user as $key => $value) {                     // Вариант с функцией json_encode
    echo $key . ': ' . json_encode($value) . '<br>';    // Функция возвращает JSON-представление данных
}

foreach ($user as $key => $value) {                     // Вариант с функцией implode
    if (is_array($value)) {
        $value = implode(', ', $value);        // Функция implode объединяет элементы массива в строку
    }
    echo $key . ': ' . $value . '<br>';                 // В этом варианте данные отобразятся более изящно
}
// Еще вариант с перебора с if else тут https://www.youtube.com/watch?v=NhXvpHB_PMQ&t=683s

// Циклы foreach и for имеют альтернативный синтаксис с двоеточием и endforeach/endfor вместо фигурных скобок
// Альтернативный синтаксис может быть использован при встраивании PHP кода в HTML
// Больше о нем тут https://www.php.net/manual/ru/control-structures.alternative-syntax.php