<?php   // Типы данных. Типы object, callable, iterable, resource будут рассмотрены в других уроках

echo $a = true, '<br>';             // Тип данных bool (true/false)
echo $b = 123, '<br>';              // Тип данных int (123, 0, 1, -234)
echo $c = 123.456, '<br>';          // Тип данных float (1.5, 0.1, -10.9, 2.0)
echo $d = 'string', '<br><br>';     // Тип данных string ('Alex', 'Hello', '123')

echo gettype($a), '<br>';           // Выводит тип указанной переменной. В PHP тип определяется автоматически
var_dump($a, $b, $c, $d);           // Функция var_dump выводит тип и значение переменных, а также длину string
echo '<br><br>';

$array = [5, 1.7, "Alex", true];    // Это массив значений. Может одержать как данные одного типа, так и смешанные
print_r($array);                    // Выводит значение и его порядковый номер в массиве. Отсчет начинается с 0

var_dump($n = null);                // Тип данных null означает отсутствие значения
echo '<br><br>';

function sum($x, $y, $z) {          // PHP умеет жонглировать типами

    var_dump($x, $y, $z);           // В данном случае суммирует int (2), string (3.5) и bool (1)
    echo '<br>';
    return $x + $y + $z;
}
var_dump($sum = sum(2, '3.5', true));   // Тип полученных данных в результате такого сложения будет float (6.5)
echo '<br><br>';

function div(int $e, int $f) {      // Можно принудительно присвоить тип, даже если значение относится к другому типу
    var_dump($e, $f);               // У переменных $e(string) и $f(bool) выведется тип int, а $e потеряет дробную часть
    echo '<br>';                    // Нужно учитывать, что это работает не со всеми типами
    return $e - $f;
}
var_dump($sum = div('10.999', true));
echo '<br><br>';

var_dump ($g = (int) '100');        // Приведение типа string к типу int путем добавления (int) перед значением
var_dump ($h = (float) 24);         // Приведение типа int к типу float. Для float необязательно наличие дробной части

