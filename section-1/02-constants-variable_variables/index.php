<?php
// Константы создаются с помощью define или const. Значение константы не может быть изменено после присвоения
// Константы define определяются при запуске программы после компиляции
// Константы const определяются во время компиляции, перед запуском программы

define('STATUS_PAID', 'paid');  // Создаем константу STATUS_PAID и присваиваем значение paid
echo STATUS_PAID . '<br>';      // Вывод значения константы. Знак $ не ставится, в отличие от переменных

echo defined('STATUS_PAID') . '<br>';   // Проверка, определена ли эта константа. Выведет 1, означает true
echo defined('STATUS_VOID') . '<br>';   // Пример неопределенной константы. Не выведет ничего, означает false

const STATUS_VOID = 'void';     // Второй способ создания константы
echo STATUS_VOID . '<br>';      // Константы принято именовать заглавными буквами

if(true) {
    define('STATUS_PENDING', 'pending');    // В отличие от const, define может использоваться в подобных конструкциях
    echo STATUS_PENDING . '<br>';
}

$closed = 'CLOSED';
define ('STATUS_' . $closed, $closed);      // define позволяет создавать константы динамически
echo STATUS_CLOSED . '<br>';    // IDE подчеркивает красным, поскольку константа определится лишь при запуске программы

echo PHP_VERSION . '<br>';      // Пример предопределенной константы. Начав печатать PHP_ можно открыть список
echo __LINE__ . '<br>';         // Пример магической константы. Начав печатать __ можно открыть список
echo __LINE__ . '<br>';         // Эта константа выводит номер строки кода, в которой она находится

$foo = 'bar';
$$foo = 'baz';  // Это переменная переменной. Создаст из значения $foo новую переменную $bar и присвоит ей значение baz
echo "$bar $foo {$$foo} {${$foo}}"; // $$ не работает в кавычках. Используем фигурные скобки - {$$foo} или {${$foo}}

// Константы используются для хранения значений, которые не должны изменяться во время выполнения программы
// Например - конфигурационные данные, статус коды, сообщения, пути к файлам, API ключи