<?php
// Таблица приоритета и ассоциативности - https://www.php.net/manual/ru/language.operators.precedence.php

$a = 5 + 3 * 5;     // Приоритет от наибольшего к наименьшему - умножение, сумма, присваивание
var_dump($a);       // Приоритетность можно менять с помощью скобок. $a = (5 + 3) * 5, и даже так ($a = 5) + 3 * 5

// Операторы с одинаковым приоритетом группируются по ассоциативности (см. таблицу по ссылке выше)
$b = $c = 5;        // Оператор = правоассоциативный, поэтому выражение выполняется справа налево $b = ($c = 5)

$e = 5;
$f = 2;
$g =10;
$h = $e / $f * $g;  // Операторы / и * левоассоциативные, поэтому выражение выполнится так $h = ($e / $f) * $g
var_dump($h);

//$h = $e < $f > $g; Неассоциативные операторы с одним приоритетом не используются вместе, это приведет к ошибке

$i = true;
$j = false;
$k = true;
var_dump($i && ! $j);       // У оператора ! приоритет выше, чем у &&, поэтому он выполнится первым
var_dump($i && $j || $k);   // У оператора || приоритет ниже. ($i && $j) || $k

$l = $i and $j;     // У оператора = приоритет выше, чем у and, но ниже, чем у &&
var_dump($l);

// Рекомендуется всегда использовать скобки для приоритизации операторов, это позволит управлять ими более гибко
// Скобки не только помогут избежать возможных ошибок, но и улучшит читабельность кода